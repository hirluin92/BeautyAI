// middleware.ts - VERSIONE COMPLETAMENTE RIFATTA
import { createServerClient, type CookieOptions } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'
import { Database } from '@/types/database'

export async function middleware(request: NextRequest) {
  console.log('🔧 Middleware executing for:', request.nextUrl.pathname)
  
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  })

  const supabase = createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value
        },
        set(name: string, value: string, options: CookieOptions) {
          request.cookies.set({
            name,
            value,
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          })
          response.cookies.set({
            name,
            value,
            ...options,
          })
        },
        remove(name: string, options: CookieOptions) {
          request.cookies.set({
            name,
            value: '',
            ...options,
          })
          response = NextResponse.next({
            request: {
              headers: request.headers,
            },
          })
          response.cookies.set({
            name,
            value: '',
            ...options,
          })
        },
      },
    }
  )

  const {
    data: { user },
  } = await supabase.auth.getUser()

  console.log('🔧 User in middleware:', user?.id || 'No user')

  // DEFINISCO TUTTE LE VARIABILI PRIMA DI USARLE
  const currentPath = request.nextUrl.pathname
  
  const publicRoutes = [
    '/',
    '/login', 
    '/register', 
    '/auth/complete-setup',
    '/auth/complete-registration',
    '/error'
  ]

  const protectedRoutes = [
    '/dashboard', 
    '/bookings', 
    '/clients', 
    '/services', 
    '/calendar', 
    '/staff', 
    '/settings'
  ]

  const isPublicRoute = publicRoutes.includes(currentPath) || 
                       currentPath.startsWith('/auth/') ||
                       currentPath.startsWith('/api/')

  const isProtectedRoute = protectedRoutes.some(route => 
    currentPath.startsWith(route)
  )

  // ORA POSSO LOGGARE TUTTO
  console.log('🔧 Current path:', currentPath)
  console.log('🔧 Is public route:', isPublicRoute)
  console.log('🔧 Is protected route:', isProtectedRoute)

  // SE NON È AUTENTICATO E CERCA DI ACCEDERE A ROUTE PROTETTA
  if (!user && isProtectedRoute) {
    console.log('❌ No user accessing protected route, redirecting to login')
    const redirectUrl = new URL('/login', request.url)
    redirectUrl.searchParams.set('redirectedFrom', currentPath)
    return NextResponse.redirect(redirectUrl)
  }

  // SE È AUTENTICATO E CERCA DI ACCEDERE A LOGIN/REGISTER
  if (user && ['/login', '/register'].includes(currentPath)) {
    const redirectedFrom = request.nextUrl.searchParams.get('redirectedFrom')
    
    if (redirectedFrom && redirectedFrom.startsWith('/dashboard')) {
      console.log('🔄 User logged in, redirecting to original destination:', redirectedFrom)
      return NextResponse.redirect(new URL(redirectedFrom, request.url))
    }
    
    console.log('🔄 User already logged in, redirecting to dashboard')
    return NextResponse.redirect(new URL('/dashboard', request.url))
  }

  // SE È AUTENTICATO E È SULLA ROOT
  if (user && currentPath === '/') {
    console.log('🔄 User on homepage, redirecting to dashboard')
    return NextResponse.redirect(new URL('/dashboard', request.url))
  }

  console.log('✅ Middleware passed, continuing to:', currentPath)
  return response
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}