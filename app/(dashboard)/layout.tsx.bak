// app/(dashboard)/layout.tsx
'use client';

import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { useState, useEffect } from 'react';

// Componente Sidebar Rivoluzionario
function Sidebar() {
  const pathname = usePathname();
  const [isCollapsed, setIsCollapsed] = useState(false);

  const menuItems = [
    { 
      href: '/dashboard', 
      icon: (
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 18h6v-2H3v2zM3 6v2h18V6H3zm0 7h12v-2H3v2z" />
        </svg>
      ), 
      label: 'Dashboard',
      gradient: 'from-cyan-400 to-blue-500'
    },
    { 
      href: '/bookings', 
      icon: (
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
        </svg>
      ), 
      label: 'Quantum Booking',
      gradient: 'from-purple-500 to-pink-500'
    },
    { 
      href: '/clients', 
      icon: (
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
        </svg>
      ), 
      label: 'Client DNA',
      gradient: 'from-teal-400 to-cyan-500'
    },
    { 
      href: '/services', 
      icon: (
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
        </svg>
      ), 
      label: 'Beauty Universe',
      gradient: 'from-orange-400 to-yellow-400'
    },
    { 
      href: '/calendar', 
      icon: (
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
      ), 
      label: 'Time Matrix',
      gradient: 'from-green-400 to-emerald-500'
    },
    { 
      href: '/analytics', 
      icon: (
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
        </svg>
      ), 
      label: 'Oracle Analytics',
      gradient: 'from-violet-500 to-purple-600'
    },
    { 
      href: '/ai-chat', 
      icon: (
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
        </svg>
      ), 
      label: 'Neural Genesis',
      gradient: 'from-pink-500 to-rose-500'
    },
    { 
      href: '/settings', 
      icon: (
        <svg width="24" height="24" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
        </svg>
      ), 
      label: 'Command Center',
      gradient: 'from-slate-400 to-slate-600'
    },
  ];

  return (
    <aside className={`${isCollapsed ? 'w-20' : 'w-80'} min-h-screen transition-all duration-500 ease-in-out relative`}>
      {/* Sfondo glassmorphism con effetti */}
      <div className="absolute inset-0 bg-white/5 backdrop-blur-xl border-r border-white/10">
        <div className="absolute inset-0 bg-gradient-to-b from-cyan-500/5 via-transparent to-purple-500/5"></div>
      </div>
      
      <div className="relative z-10 p-8">
        {/* Header con Logo */}
        <div className="flex items-center justify-between mb-12">
          <div className="flex items-center gap-4">
            <div className="w-12 h-12 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-2xl flex items-center justify-center shadow-lg shadow-cyan-500/30">
              <svg width="24" height="24" fill="white" viewBox="0 0 24 24">
                <path d="M12,2A10,10 0 0,1 22,12A10,10 0 0,1 12,22A10,10 0 0,1 2,12A10,10 0 0,1 12,2M12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12A8,8 0 0,0 12,4Z"/>
              </svg>
            </div>
            {!isCollapsed && (
              <div>
                <span className="text-2xl font-black bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-600 bg-clip-text text-transparent">
                  Beauty AI
                </span>
                <div className="text-xs text-white/60 font-medium">NEURAL SYSTEM</div>
              </div>
            )}
          </div>
          
          <button
            onClick={() => setIsCollapsed(!isCollapsed)}
            className="p-2 rounded-xl bg-white/10 hover:bg-white/20 transition-all duration-300 hover:scale-110"
          >
            <svg width="20" height="20" fill="white" viewBox="0 0 24 24">
              <path d={isCollapsed ? "M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z" : "M19 13H5v-2h14v2z"}/>
            </svg>
          </button>
        </div>
        
        {/* Navigation */}
        <nav className="space-y-3">
          {menuItems.map((item, index) => {
            const isActive = pathname === item.href;
            return (
              <Link
                key={item.href}
                href={item.href}
                className={`group relative flex items-center gap-4 px-5 py-4 rounded-2xl transition-all duration-500 hover:scale-105 ${
                  isActive
                    ? `bg-gradient-to-r ${item.gradient} shadow-lg text-white`
                    : 'hover:bg-white/10 text-white/80 hover:text-white'
                }`}
                style={{
                  animationDelay: `${index * 100}ms`,
                }}
              >
                {/* Effetto glow per item attivo */}
                {isActive && (
                  <div className={`absolute inset-0 bg-gradient-to-r ${item.gradient} opacity-20 blur-xl rounded-2xl`}></div>
                )}
                
                <div className={`relative z-10 ${isActive ? 'text-white' : 'text-white/70 group-hover:text-white'} transition-colors duration-300`}>
                  {item.icon}
                </div>
                
                {!isCollapsed && (
                  <span className="relative z-10 font-semibold text-base truncate">
                    {item.label}
                  </span>
                )}
                
                {/* Indicatore attivo */}
                {isActive && (
                  <div className="absolute right-4 w-2 h-2 bg-white rounded-full animate-pulse"></div>
                )}
                
                {/* Tooltip per sidebar collassata */}
                {isCollapsed && (
                  <div className="absolute left-full ml-4 px-3 py-2 bg-gray-900 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none whitespace-nowrap z-50">
                    {item.label}
                    <div className="absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-1 w-2 h-2 bg-gray-900 rotate-45"></div>
                  </div>
                )}
              </Link>
            );
          })}
        </nav>
        
        {/* Status Panel */}
        {!isCollapsed && (
          <div className="mt-12 p-6 bg-gradient-to-br from-white/10 to-white/5 rounded-2xl border border-white/20">
            <div className="flex items-center gap-3 mb-4">
              <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
              <span className="text-white font-semibold">Sistema Attivo</span>
            </div>
            <div className="space-y-2 text-sm text-white/70">
              <div className="flex justify-between">
                <span>Neural AI</span>
                <span className="text-green-400">Online</span>
              </div>
              <div className="flex justify-between">
                <span>Performance</span>
                <span className="text-cyan-400">98.7%</span>
              </div>
              <div className="flex justify-between">
                <span>Clienti Attivi</span>
                <span className="text-purple-400">2,847</span>
              </div>
            </div>
          </div>
        )}
      </div>
    </aside>
  );
}

// Header Component
function Header() {
  const [currentTime, setCurrentTime] = useState(new Date());

	useEffect(() => {
	  // Create particles
	  function createParticles() {
		const container = document.getElementById('particlesAdvanced');
		if (!container) return;
		
		const colors = ['#00d4ff', '#3b82f6', '#8b5cf6', '#ec4899'];
		
		for (let i = 0; i < 50; i++) {
		  const particle = document.createElement('div');
		  particle.style.cssText = `
			position: absolute;
			left: ${Math.random() * 100}%;
			top: ${Math.random() * 100}%;
			width: ${Math.random() * 4 + 2}px;
			height: ${Math.random() * 4 + 2}px;
			background: ${colors[Math.floor(Math.random() * colors.length)]};
			border-radius: 50%;
			animation: particleFloat ${Math.random() * 4 + 6}s ease-in-out infinite;
			animation-delay: ${Math.random() * 8}s;
			opacity: ${Math.random() * 0.5 + 0.3};
		  `;
		  container.appendChild(particle);
		}
	  }
	  
	  createParticles();
	}, []);

  useEffect(() => {
    const timer = setInterval(() => setCurrentTime(new Date()), 1000);
    return () => clearInterval(timer);
  }, []);

  return (
    <header className="h-20 bg-white/5 backdrop-blur-xl border-b border-white/10 flex items-center justify-between px-8">
      {/* Search Bar Globale */}
      <div className="flex-1 max-w-xl">
        <div className="relative">
          <div className="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
            <svg className="h-5 w-5 text-white/50" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </div>
          <input
            type="text"
            className="w-full bg-white/10 border border-white/20 rounded-2xl py-3 pl-12 pr-4 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-cyan-400/50 focus:border-cyan-400/50 transition-all duration-300"
            placeholder="Cerca con Neural AI... clienti, servizi, trends"
          />
        </div>
      </div>

      {/* Header Controls */}
      <div className="flex items-center gap-6">
        {/* Time Display */}
        <div className="text-white/70 text-sm font-mono">
          {currentTime.toLocaleTimeString()}
        </div>

        {/* Notifications */}
        <button className="relative p-3 bg-white/10 rounded-xl hover:bg-white/20 transition-all duration-300 hover:scale-110">
          <svg className="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-5 5v-5zM21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <div className="absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center text-xs font-bold">
            3
          </div>
        </button>

        {/* Profile */}
        <div className="flex items-center gap-3 p-2 bg-white/10 rounded-xl hover:bg-white/20 transition-all duration-300 cursor-pointer">
          <div className="w-8 h-8 bg-gradient-to-br from-purple-400 to-pink-500 rounded-lg flex items-center justify-center text-white font-bold">
            U
          </div>
          <span className="text-white font-medium">Admin</span>
        </div>
      </div>
    </header>
  );
}

// Layout Principale
export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="min-h-screen" style={{
      background: '#0d0d14',
      backgroundImage: `
        radial-gradient(circle at 20% 80%, rgba(59, 130, 246, 0.15) 0%, transparent 50%),
        radial-gradient(circle at 80% 20%, rgba(139, 92, 246, 0.2) 0%, transparent 50%),
        radial-gradient(circle at 40% 40%, rgba(6, 182, 212, 0.1) 0%, transparent 50%),
        linear-gradient(135deg, #0a0a0f 0%, #1a1a2e 25%, #16213e 50%, #0f1419 75%, #0d0d14 100%)
      `
    }}>
      <div className="flex">
        <Sidebar />
        <div className="flex-1 flex flex-col min-h-screen">
          <Header />
          <main className="flex-1 p-8 overflow-auto">
            <div className="max-w-7xl mx-auto">
              {children}
            </div>
          </main>
        </div>
      </div>

      {/* AI Assistant Floating Button */}
      <div className="fixed bottom-8 right-8 z-50">
        <button className="group relative w-16 h-16 bg-gradient-to-br from-cyan-400 to-blue-500 rounded-2xl shadow-2xl hover:scale-110 transition-all duration-500 overflow-hidden">
          <div className="absolute inset-0 bg-gradient-to-br from-cyan-400 to-blue-500 opacity-75 animate-pulse"></div>
          <div className="relative z-10 flex items-center justify-center h-full">
            <svg className="w-8 h-8 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
            </svg>
          </div>
          <div className="absolute inset-0 bg-white/20 transform scale-0 group-hover:scale-100 transition-transform duration-500 rounded-2xl"></div>
        </button>
      </div>

      <style jsx>{`
        .fade-in {
          animation: fadeIn 0.8s ease-in-out;
        }
        
        @keyframes fadeIn {
          from { opacity: 0; transform: translateY(20px); }
          to { opacity: 1; transform: translateY(0); }
        }
      `}</style>
    </div>
  );
}